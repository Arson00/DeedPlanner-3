//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Prefabs/Input/DPInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Warlander.Deedplanner.Inputs
{
    public partial class @DPInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @DPInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DPInput"",
    ""maps"": [
        {
            ""name"": ""MapInputShared"",
            ""id"": ""05536137-e996-4986-a473-384875a6bd7f"",
            ""actions"": [
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""17bfb7ae-f45f-4a49-9b77-36afe6b3e605"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Alt Boost"",
                    ""type"": ""Button"",
                    ""id"": ""30e2d9b8-f06e-48d0-92a5-1684f683ad36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""91004101-fd27-4c8a-8e9a-6681dea99b90"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b68ea20-16b1-42e9-bd91-640efcd661a6"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Alt Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapInput2D"",
            ""id"": ""854db249-95e9-42a0-9f9b-0e632925bfc2"",
            ""actions"": [
                {
                    ""name"": ""Move Map"",
                    ""type"": ""Value"",
                    ""id"": ""d60b08f2-1793-4ea3-a126-54027b6b8c9f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom In/Out"",
                    ""type"": ""Value"",
                    ""id"": ""61c03a73-4c7b-4b4e-8048-aa854f55b3c6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn Camera Clockwise"",
                    ""type"": ""Button"",
                    ""id"": ""971d7499-f1cc-408e-bf14-c50ab91170e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn Camera Counterclockwise"",
                    ""type"": ""Button"",
                    ""id"": ""4d242828-50ae-490a-9306-64a7acce0b68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b8e6b19c-c24e-453e-9418-f49e027b623f"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Map"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba019ddb-3bce-40a6-80f2-769ad0035c97"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0a87a36b-1aa9-475d-89ee-66fcb39d53d0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fba89cf8-595a-40f4-9f8c-c5293aaed961"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""692bcd98-07c4-4178-9aab-f01bfe627b32"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Move Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""928bba72-63c6-42ea-b3db-41802469ee13"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom In/Out"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f1a0234b-5868-4126-8577-62d4dfe7b15c"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Zoom In/Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9a0dd726-54ef-4bea-9241-343c951cfd4c"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Zoom In/Out"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7227c03f-9a4b-48eb-bab7-8d05cbd4fcb2"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Turn Camera Clockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42d7e480-a2f6-44f2-ac3b-c3dfe10b5e35"",
                    ""path"": ""<Keyboard>/pageUp"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Turn Camera Counterclockwise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MapInput3D"",
            ""id"": ""35620df3-4660-49f6-b73b-d63dcd26c6b3"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // MapInputShared
            m_MapInputShared = asset.FindActionMap("MapInputShared", throwIfNotFound: true);
            m_MapInputShared_Boost = m_MapInputShared.FindAction("Boost", throwIfNotFound: true);
            m_MapInputShared_AltBoost = m_MapInputShared.FindAction("Alt Boost", throwIfNotFound: true);
            // MapInput2D
            m_MapInput2D = asset.FindActionMap("MapInput2D", throwIfNotFound: true);
            m_MapInput2D_MoveMap = m_MapInput2D.FindAction("Move Map", throwIfNotFound: true);
            m_MapInput2D_ZoomInOut = m_MapInput2D.FindAction("Zoom In/Out", throwIfNotFound: true);
            m_MapInput2D_TurnCameraClockwise = m_MapInput2D.FindAction("Turn Camera Clockwise", throwIfNotFound: true);
            m_MapInput2D_TurnCameraCounterclockwise = m_MapInput2D.FindAction("Turn Camera Counterclockwise", throwIfNotFound: true);
            // MapInput3D
            m_MapInput3D = asset.FindActionMap("MapInput3D", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MapInputShared
        private readonly InputActionMap m_MapInputShared;
        private List<IMapInputSharedActions> m_MapInputSharedActionsCallbackInterfaces = new List<IMapInputSharedActions>();
        private readonly InputAction m_MapInputShared_Boost;
        private readonly InputAction m_MapInputShared_AltBoost;
        public struct MapInputSharedActions
        {
            private @DPInput m_Wrapper;
            public MapInputSharedActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Boost => m_Wrapper.m_MapInputShared_Boost;
            public InputAction @AltBoost => m_Wrapper.m_MapInputShared_AltBoost;
            public InputActionMap Get() { return m_Wrapper.m_MapInputShared; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MapInputSharedActions set) { return set.Get(); }
            public void AddCallbacks(IMapInputSharedActions instance)
            {
                if (instance == null || m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Add(instance);
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @AltBoost.started += instance.OnAltBoost;
                @AltBoost.performed += instance.OnAltBoost;
                @AltBoost.canceled += instance.OnAltBoost;
            }

            private void UnregisterCallbacks(IMapInputSharedActions instance)
            {
                @Boost.started -= instance.OnBoost;
                @Boost.performed -= instance.OnBoost;
                @Boost.canceled -= instance.OnBoost;
                @AltBoost.started -= instance.OnAltBoost;
                @AltBoost.performed -= instance.OnAltBoost;
                @AltBoost.canceled -= instance.OnAltBoost;
            }

            public void RemoveCallbacks(IMapInputSharedActions instance)
            {
                if (m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMapInputSharedActions instance)
            {
                foreach (var item in m_Wrapper.m_MapInputSharedActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MapInputSharedActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MapInputSharedActions @MapInputShared => new MapInputSharedActions(this);

        // MapInput2D
        private readonly InputActionMap m_MapInput2D;
        private List<IMapInput2DActions> m_MapInput2DActionsCallbackInterfaces = new List<IMapInput2DActions>();
        private readonly InputAction m_MapInput2D_MoveMap;
        private readonly InputAction m_MapInput2D_ZoomInOut;
        private readonly InputAction m_MapInput2D_TurnCameraClockwise;
        private readonly InputAction m_MapInput2D_TurnCameraCounterclockwise;
        public struct MapInput2DActions
        {
            private @DPInput m_Wrapper;
            public MapInput2DActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveMap => m_Wrapper.m_MapInput2D_MoveMap;
            public InputAction @ZoomInOut => m_Wrapper.m_MapInput2D_ZoomInOut;
            public InputAction @TurnCameraClockwise => m_Wrapper.m_MapInput2D_TurnCameraClockwise;
            public InputAction @TurnCameraCounterclockwise => m_Wrapper.m_MapInput2D_TurnCameraCounterclockwise;
            public InputActionMap Get() { return m_Wrapper.m_MapInput2D; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MapInput2DActions set) { return set.Get(); }
            public void AddCallbacks(IMapInput2DActions instance)
            {
                if (instance == null || m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Add(instance);
                @MoveMap.started += instance.OnMoveMap;
                @MoveMap.performed += instance.OnMoveMap;
                @MoveMap.canceled += instance.OnMoveMap;
                @ZoomInOut.started += instance.OnZoomInOut;
                @ZoomInOut.performed += instance.OnZoomInOut;
                @ZoomInOut.canceled += instance.OnZoomInOut;
                @TurnCameraClockwise.started += instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.performed += instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.canceled += instance.OnTurnCameraClockwise;
                @TurnCameraCounterclockwise.started += instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.performed += instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.canceled += instance.OnTurnCameraCounterclockwise;
            }

            private void UnregisterCallbacks(IMapInput2DActions instance)
            {
                @MoveMap.started -= instance.OnMoveMap;
                @MoveMap.performed -= instance.OnMoveMap;
                @MoveMap.canceled -= instance.OnMoveMap;
                @ZoomInOut.started -= instance.OnZoomInOut;
                @ZoomInOut.performed -= instance.OnZoomInOut;
                @ZoomInOut.canceled -= instance.OnZoomInOut;
                @TurnCameraClockwise.started -= instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.performed -= instance.OnTurnCameraClockwise;
                @TurnCameraClockwise.canceled -= instance.OnTurnCameraClockwise;
                @TurnCameraCounterclockwise.started -= instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.performed -= instance.OnTurnCameraCounterclockwise;
                @TurnCameraCounterclockwise.canceled -= instance.OnTurnCameraCounterclockwise;
            }

            public void RemoveCallbacks(IMapInput2DActions instance)
            {
                if (m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMapInput2DActions instance)
            {
                foreach (var item in m_Wrapper.m_MapInput2DActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MapInput2DActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MapInput2DActions @MapInput2D => new MapInput2DActions(this);

        // MapInput3D
        private readonly InputActionMap m_MapInput3D;
        private List<IMapInput3DActions> m_MapInput3DActionsCallbackInterfaces = new List<IMapInput3DActions>();
        public struct MapInput3DActions
        {
            private @DPInput m_Wrapper;
            public MapInput3DActions(@DPInput wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_MapInput3D; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MapInput3DActions set) { return set.Get(); }
            public void AddCallbacks(IMapInput3DActions instance)
            {
                if (instance == null || m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Add(instance);
            }

            private void UnregisterCallbacks(IMapInput3DActions instance)
            {
            }

            public void RemoveCallbacks(IMapInput3DActions instance)
            {
                if (m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMapInput3DActions instance)
            {
                foreach (var item in m_Wrapper.m_MapInput3DActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MapInput3DActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MapInput3DActions @MapInput3D => new MapInput3DActions(this);
        private int m_MouseandKeyboardSchemeIndex = -1;
        public InputControlScheme MouseandKeyboardScheme
        {
            get
            {
                if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
                return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
            }
        }
        public interface IMapInputSharedActions
        {
            void OnBoost(InputAction.CallbackContext context);
            void OnAltBoost(InputAction.CallbackContext context);
        }
        public interface IMapInput2DActions
        {
            void OnMoveMap(InputAction.CallbackContext context);
            void OnZoomInOut(InputAction.CallbackContext context);
            void OnTurnCameraClockwise(InputAction.CallbackContext context);
            void OnTurnCameraCounterclockwise(InputAction.CallbackContext context);
        }
        public interface IMapInput3DActions
        {
        }
    }
}
